// <auto-generated />
using System;
using BreganTwitchBot.Domain.Data.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BreganTwitchBot.Domain.Data.Database.Migrations.Postgresql
{
    [DbContext(typeof(PostgresqlContext))]
    partial class PostgresqlContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BreganTwitchBot.Domain.Data.Database.Models.Channel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BotTwitchChannelId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BotTwitchChannelName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BotTwitchChannelOAuthToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BotTwitchChannelRefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BroadcasterTwitchChannelId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BroadcasterTwitchChannelName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BroadcasterTwitchChannelOAuthToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BroadcasterTwitchChannelRefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DiscordApiKey")
                        .HasColumnType("text");

                    b.Property<string>("DiscordGuildId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Data.Database.Models.ChannelConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ChannelCurrencyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer");

                    b.Property<long>("CurrencyPointCap")
                        .HasColumnType("bigint");

                    b.Property<string>("DailyPointsCollectingAllowed")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("DiscordBanRoleChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("DiscordEventChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("DiscordGeneralChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("DiscordGiveawayChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("DiscordGuildOwnerId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("DiscordReactionRoleChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("DiscordStreamAnnouncementChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("DiscordUserCommandsChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("DiscordUserLinkingChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("DiscordUserRankUpAnnouncementChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime>("LastDailyPointsAllowed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("StreamAnnounced")
                        .HasColumnType("boolean");

                    b.Property<bool>("StreamHappenedThisWeek")
                        .HasColumnType("boolean");

                    b.Property<bool>("SubathonActive")
                        .HasColumnType("boolean");

                    b.Property<TimeSpan>("SubathonTime")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId")
                        .IsUnique();

                    b.ToTable("ChannelConfig");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Data.Database.Models.ChannelUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DiscordUserId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("TwitchUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TwitchUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ChannelUsers");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Data.Database.Models.EnvironmentalSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EnvironmentalSettings");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Data.Database.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Data.Database.Models.UserRefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Data.Database.Models.ChannelConfig", b =>
                {
                    b.HasOne("BreganTwitchBot.Domain.Data.Database.Models.Channel", "Channel")
                        .WithOne("ChannelConfig")
                        .HasForeignKey("BreganTwitchBot.Domain.Data.Database.Models.ChannelConfig", "ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Data.Database.Models.UserRefreshToken", b =>
                {
                    b.HasOne("BreganTwitchBot.Domain.Data.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Data.Database.Models.Channel", b =>
                {
                    b.Navigation("ChannelConfig")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
