// <auto-generated />
using System;
using BreganTwitchBot.Domain.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BreganTwitchBot.Domain.Database.Migrations.Postgresql
{
    [DbContext(typeof(PostgresqlContext))]
    [Migration("20250419064421_FinalReleaseMigration")]
    partial class FinalReleaseMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.AiBookData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AiType")
                        .HasColumnType("integer");

                    b.Property<int>("ChannelUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChannelUserId");

                    b.ToTable("AiBookData");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.Birthday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer");

                    b.Property<int>("ChannelUserId")
                        .HasColumnType("integer");

                    b.Property<int>("Day")
                        .HasColumnType("integer");

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("ChannelUserId");

                    b.ToTable("Birthdays");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.Blacklist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WordType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("Blacklist");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.Channel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BotTwitchChannelId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BotTwitchChannelName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BotTwitchChannelOAuthToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BotTwitchChannelRefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BroadcasterTwitchChannelId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BroadcasterTwitchChannelName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BroadcasterTwitchChannelOAuthToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BroadcasterTwitchChannelRefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.ChannelConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("BroadcasterLive")
                        .HasColumnType("boolean");

                    b.Property<string>("ChannelCurrencyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer");

                    b.Property<long>("CurrencyPointCap")
                        .HasColumnType("bigint");

                    b.Property<bool>("DailyPointsCollectingAllowed")
                        .HasColumnType("boolean");

                    b.Property<bool>("DiscordEnabled")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("DiscordEventChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("DiscordGeneralChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("DiscordGiveawayChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("DiscordGuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("DiscordGuildOwnerId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("DiscordModeratorRoleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("DiscordStreamAnnouncementChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("DiscordUserCommandsChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("DiscordUserRankUpAnnouncementChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("DiscordWelcomeMessageChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime>("LastDailyPointsAllowed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastStreamEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastStreamStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("StreamAnnounced")
                        .HasColumnType("boolean");

                    b.Property<bool>("StreamHappenedThisWeek")
                        .HasColumnType("boolean");

                    b.Property<bool>("SubathonActive")
                        .HasColumnType("boolean");

                    b.Property<TimeSpan>("SubathonTime")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId")
                        .IsUnique();

                    b.ToTable("ChannelConfig");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.ChannelMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("ChannelMessages");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.ChannelRank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BonusRankPointsEarned")
                        .HasColumnType("integer");

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("DiscordRoleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("RankMinutesRequired")
                        .HasColumnType("integer");

                    b.Property<string>("RankName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("ChannelRanks");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.ChannelUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("CanUseOpenAi")
                        .HasColumnType("boolean");

                    b.Property<decimal>("DiscordUserId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TwitchUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TwitchUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ChannelUsers");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.ChannelUserData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer");

                    b.Property<int>("ChannelUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("InStream")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSub")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuperMod")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVip")
                        .HasColumnType("boolean");

                    b.Property<long>("Points")
                        .HasColumnType("bigint");

                    b.Property<int>("TimeoutStrikes")
                        .HasColumnType("integer");

                    b.Property<int>("WarnStrikes")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("ChannelUserId");

                    b.ToTable("ChannelUserData");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.ChannelUserGambleStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookWins")
                        .HasColumnType("integer");

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer");

                    b.Property<int>("ChannelUserId")
                        .HasColumnType("integer");

                    b.Property<int>("JackpotWins")
                        .HasColumnType("integer");

                    b.Property<long>("PointsGambled")
                        .HasColumnType("bigint");

                    b.Property<long>("PointsLost")
                        .HasColumnType("bigint");

                    b.Property<long>("PointsWon")
                        .HasColumnType("bigint");

                    b.Property<int>("SmorcWins")
                        .HasColumnType("integer");

                    b.Property<int>("Tier1Wins")
                        .HasColumnType("integer");

                    b.Property<int>("Tier2Wins")
                        .HasColumnType("integer");

                    b.Property<int>("Tier3Wins")
                        .HasColumnType("integer");

                    b.Property<int>("TotalSpins")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("ChannelUserId");

                    b.ToTable("ChannelUserGambleStats");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.ChannelUserRankProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AchievedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer");

                    b.Property<int>("ChannelRankId")
                        .HasColumnType("integer");

                    b.Property<int>("ChannelUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("ChannelRankId");

                    b.HasIndex("ChannelUserId");

                    b.ToTable("ChannelUserRankProgress");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.ChannelUserStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BitsDonatedThisMonth")
                        .HasColumnType("integer");

                    b.Property<int>("BossesDone")
                        .HasColumnType("integer");

                    b.Property<long>("BossesPointsWon")
                        .HasColumnType("bigint");

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer");

                    b.Property<int>("ChannelUserId")
                        .HasColumnType("integer");

                    b.Property<int>("GiftedSubsThisMonth")
                        .HasColumnType("integer");

                    b.Property<int>("MarblesWins")
                        .HasColumnType("integer");

                    b.Property<int>("TotalMessages")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("ChannelUserId");

                    b.ToTable("ChannelUserStats");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.ChannelUserWatchtime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer");

                    b.Property<int>("ChannelUserId")
                        .HasColumnType("integer");

                    b.Property<int>("MinutesInStream")
                        .HasColumnType("integer");

                    b.Property<int>("MinutesWatchedThisMonth")
                        .HasColumnType("integer");

                    b.Property<int>("MinutesWatchedThisStream")
                        .HasColumnType("integer");

                    b.Property<int>("MinutesWatchedThisWeek")
                        .HasColumnType("integer");

                    b.Property<int>("MinutesWatchedThisYear")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("ChannelUserId");

                    b.ToTable("ChannelUserWatchtime");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.CustomCommand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer");

                    b.Property<string>("CommandName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CommandText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUsed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TimesUsed")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("CustomCommands");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.DiscordDailyPoints", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer");

                    b.Property<int>("ChannelUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("DiscordDailyClaimed")
                        .HasColumnType("boolean");

                    b.Property<int>("DiscordDailyStreak")
                        .HasColumnType("integer");

                    b.Property<int>("DiscordDailyTotalClaims")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("ChannelUserId");

                    b.ToTable("DiscordDailyPoints");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.DiscordLinkRequests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("DiscordUserId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("TwitchLinkCode")
                        .HasColumnType("integer");

                    b.Property<string>("TwitchUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DiscordLinkRequests");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.DiscordSpinStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer");

                    b.Property<int>("CheeseWins")
                        .HasColumnType("integer");

                    b.Property<int>("CherriesWins")
                        .HasColumnType("integer");

                    b.Property<int>("CucumberWins")
                        .HasColumnType("integer");

                    b.Property<int>("DiscordTotalSpins")
                        .HasColumnType("integer");

                    b.Property<int>("EggplantWins")
                        .HasColumnType("integer");

                    b.Property<int>("GrapesWins")
                        .HasColumnType("integer");

                    b.Property<int>("PineappleWins")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId")
                        .IsUnique();

                    b.ToTable("DiscordSpinStats");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.DiscordUserStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer");

                    b.Property<int>("ChannelUserId")
                        .HasColumnType("integer");

                    b.Property<int>("DiscordLevel")
                        .HasColumnType("integer");

                    b.Property<bool>("DiscordLevelUpNotifsEnabled")
                        .HasColumnType("boolean");

                    b.Property<long>("DiscordXp")
                        .HasColumnType("bigint");

                    b.Property<int>("PrestigeLevel")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("ChannelUserId");

                    b.ToTable("DiscordUserStats");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.EnvironmentalSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EnvironmentalSettings");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.StreamViewCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ViewCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("StreamViewCounts");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.Subathon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer");

                    b.Property<int>("ChannelUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("ChannelUserId");

                    b.ToTable("Subathons");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.TwitchDailyPoints", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer");

                    b.Property<int>("ChannelUserId")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentStreak")
                        .HasColumnType("integer");

                    b.Property<int>("HighestStreak")
                        .HasColumnType("integer");

                    b.Property<int>("PointsClaimType")
                        .HasColumnType("integer");

                    b.Property<bool>("PointsClaimed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PointsLastClaimed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("TotalPointsClaimed")
                        .HasColumnType("bigint");

                    b.Property<int>("TotalTimesClaimed")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("ChannelUserId");

                    b.ToTable("TwitchDailyPoints");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.TwitchSlotMachineStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookWins")
                        .HasColumnType("integer");

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer");

                    b.Property<long>("JackpotAmount")
                        .HasColumnType("bigint");

                    b.Property<int>("JackpotWins")
                        .HasColumnType("integer");

                    b.Property<int>("SmorcWins")
                        .HasColumnType("integer");

                    b.Property<int>("Tier1Wins")
                        .HasColumnType("integer");

                    b.Property<int>("Tier2Wins")
                        .HasColumnType("integer");

                    b.Property<int>("Tier3Wins")
                        .HasColumnType("integer");

                    b.Property<int>("TotalSpins")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId")
                        .IsUnique();

                    b.ToTable("TwitchSlotMachineStats");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.TwitchStreamStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("AmountOfDiscordUsersJoined")
                        .HasColumnType("bigint");

                    b.Property<long>("AmountOfRewardsRedeemed")
                        .HasColumnType("bigint");

                    b.Property<long>("AmountOfUsersReset")
                        .HasColumnType("bigint");

                    b.Property<double>("AvgViewCount")
                        .HasColumnType("double precision");

                    b.Property<long>("BitsDonated")
                        .HasColumnType("bigint");

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer");

                    b.Property<long>("CommandsSent")
                        .HasColumnType("bigint");

                    b.Property<long>("DiscordRanksEarnt")
                        .HasColumnType("bigint");

                    b.Property<long>("EndingFollowerCount")
                        .HasColumnType("bigint");

                    b.Property<long>("EndingSubscriberCount")
                        .HasColumnType("bigint");

                    b.Property<long>("ForeheadWins")
                        .HasColumnType("bigint");

                    b.Property<long>("GiftedPoints")
                        .HasColumnType("bigint");

                    b.Property<long>("JackpotWins")
                        .HasColumnType("bigint");

                    b.Property<long>("KappaWins")
                        .HasColumnType("bigint");

                    b.Property<long>("LulWins")
                        .HasColumnType("bigint");

                    b.Property<long>("MessagesReceived")
                        .HasColumnType("bigint");

                    b.Property<long>("NewFollowers")
                        .HasColumnType("bigint");

                    b.Property<long>("NewGiftedSubs")
                        .HasColumnType("bigint");

                    b.Property<long>("NewSubscribers")
                        .HasColumnType("bigint");

                    b.Property<long>("PeakViewerCount")
                        .HasColumnType("bigint");

                    b.Property<long>("PointsGainedSubscribing")
                        .HasColumnType("bigint");

                    b.Property<long>("PointsGainedWatching")
                        .HasColumnType("bigint");

                    b.Property<long>("PointsGambled")
                        .HasColumnType("bigint");

                    b.Property<long>("PointsLost")
                        .HasColumnType("bigint");

                    b.Property<long>("PointsWon")
                        .HasColumnType("bigint");

                    b.Property<long>("RewardRedeemCost")
                        .HasColumnType("bigint");

                    b.Property<long>("SmorcWins")
                        .HasColumnType("bigint");

                    b.Property<long>("SongRequestsBlacklisted")
                        .HasColumnType("bigint");

                    b.Property<long>("SongRequestsLiked")
                        .HasColumnType("bigint");

                    b.Property<long>("SongRequestsSent")
                        .HasColumnType("bigint");

                    b.Property<long>("StartingFollowerCount")
                        .HasColumnType("bigint");

                    b.Property<long>("StartingSubscriberCount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StreamEnded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("StreamId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StreamStarted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("TotalBans")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalPointsClaimed")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalSpins")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalTimeouts")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalUsersClaimed")
                        .HasColumnType("bigint");

                    b.Property<long>("UniquePeople")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("Uptime")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("TwitchStreamStats");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.UniqueViewers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("UniqueViewers");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.UserRefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.AiBookData", b =>
                {
                    b.HasOne("BreganTwitchBot.Domain.Database.Models.ChannelUser", "User")
                        .WithMany()
                        .HasForeignKey("ChannelUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.Birthday", b =>
                {
                    b.HasOne("BreganTwitchBot.Domain.Database.Models.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BreganTwitchBot.Domain.Database.Models.ChannelUser", "User")
                        .WithMany()
                        .HasForeignKey("ChannelUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.Blacklist", b =>
                {
                    b.HasOne("BreganTwitchBot.Domain.Database.Models.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.ChannelConfig", b =>
                {
                    b.HasOne("BreganTwitchBot.Domain.Database.Models.Channel", "Channel")
                        .WithOne("ChannelConfig")
                        .HasForeignKey("BreganTwitchBot.Domain.Database.Models.ChannelConfig", "ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.ChannelMessages", b =>
                {
                    b.HasOne("BreganTwitchBot.Domain.Database.Models.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.ChannelRank", b =>
                {
                    b.HasOne("BreganTwitchBot.Domain.Database.Models.Channel", "Channel")
                        .WithMany("ChannelRanks")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.ChannelUserData", b =>
                {
                    b.HasOne("BreganTwitchBot.Domain.Database.Models.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BreganTwitchBot.Domain.Database.Models.ChannelUser", "ChannelUser")
                        .WithMany("ChannelUserData")
                        .HasForeignKey("ChannelUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("ChannelUser");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.ChannelUserGambleStats", b =>
                {
                    b.HasOne("BreganTwitchBot.Domain.Database.Models.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BreganTwitchBot.Domain.Database.Models.ChannelUser", "ChannelUser")
                        .WithMany("ChannelUserGambleStats")
                        .HasForeignKey("ChannelUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("ChannelUser");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.ChannelUserRankProgress", b =>
                {
                    b.HasOne("BreganTwitchBot.Domain.Database.Models.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BreganTwitchBot.Domain.Database.Models.ChannelRank", "ChannelRank")
                        .WithMany()
                        .HasForeignKey("ChannelRankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BreganTwitchBot.Domain.Database.Models.ChannelUser", "ChannelUser")
                        .WithMany("ChannelUserRankProgress")
                        .HasForeignKey("ChannelUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("ChannelRank");

                    b.Navigation("ChannelUser");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.ChannelUserStats", b =>
                {
                    b.HasOne("BreganTwitchBot.Domain.Database.Models.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BreganTwitchBot.Domain.Database.Models.ChannelUser", "User")
                        .WithMany("ChannelUserStats")
                        .HasForeignKey("ChannelUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.ChannelUserWatchtime", b =>
                {
                    b.HasOne("BreganTwitchBot.Domain.Database.Models.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BreganTwitchBot.Domain.Database.Models.ChannelUser", "ChannelUser")
                        .WithMany("ChannelUserWatchtimes")
                        .HasForeignKey("ChannelUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("ChannelUser");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.CustomCommand", b =>
                {
                    b.HasOne("BreganTwitchBot.Domain.Database.Models.Channel", "Channel")
                        .WithMany("CustomCommands")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.DiscordDailyPoints", b =>
                {
                    b.HasOne("BreganTwitchBot.Domain.Database.Models.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BreganTwitchBot.Domain.Database.Models.ChannelUser", "User")
                        .WithMany("DiscordDailyPoints")
                        .HasForeignKey("ChannelUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.DiscordSpinStats", b =>
                {
                    b.HasOne("BreganTwitchBot.Domain.Database.Models.Channel", "Channel")
                        .WithOne("DiscordSpinStats")
                        .HasForeignKey("BreganTwitchBot.Domain.Database.Models.DiscordSpinStats", "ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.DiscordUserStats", b =>
                {
                    b.HasOne("BreganTwitchBot.Domain.Database.Models.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BreganTwitchBot.Domain.Database.Models.ChannelUser", "User")
                        .WithMany("DiscordUserStats")
                        .HasForeignKey("ChannelUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.StreamViewCount", b =>
                {
                    b.HasOne("BreganTwitchBot.Domain.Database.Models.Channel", "Channel")
                        .WithMany("StreamViewCounts")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.Subathon", b =>
                {
                    b.HasOne("BreganTwitchBot.Domain.Database.Models.Channel", "Channel")
                        .WithMany("Subathons")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BreganTwitchBot.Domain.Database.Models.ChannelUser", "ChannelUser")
                        .WithMany("Subathons")
                        .HasForeignKey("ChannelUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("ChannelUser");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.TwitchDailyPoints", b =>
                {
                    b.HasOne("BreganTwitchBot.Domain.Database.Models.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BreganTwitchBot.Domain.Database.Models.ChannelUser", "User")
                        .WithMany("TwitchDailyPoints")
                        .HasForeignKey("ChannelUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.TwitchSlotMachineStats", b =>
                {
                    b.HasOne("BreganTwitchBot.Domain.Database.Models.Channel", "Channel")
                        .WithOne("TwitchSlotMachineStats")
                        .HasForeignKey("BreganTwitchBot.Domain.Database.Models.TwitchSlotMachineStats", "ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.TwitchStreamStats", b =>
                {
                    b.HasOne("BreganTwitchBot.Domain.Database.Models.Channel", "Channel")
                        .WithMany("TwitchStreamStats")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.UniqueViewers", b =>
                {
                    b.HasOne("BreganTwitchBot.Domain.Database.Models.Channel", "Channel")
                        .WithMany("UniqueViewers")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.UserRefreshToken", b =>
                {
                    b.HasOne("BreganTwitchBot.Domain.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.Channel", b =>
                {
                    b.Navigation("ChannelConfig")
                        .IsRequired();

                    b.Navigation("ChannelRanks");

                    b.Navigation("CustomCommands");

                    b.Navigation("DiscordSpinStats")
                        .IsRequired();

                    b.Navigation("StreamViewCounts");

                    b.Navigation("Subathons");

                    b.Navigation("TwitchSlotMachineStats")
                        .IsRequired();

                    b.Navigation("TwitchStreamStats");

                    b.Navigation("UniqueViewers");
                });

            modelBuilder.Entity("BreganTwitchBot.Domain.Database.Models.ChannelUser", b =>
                {
                    b.Navigation("ChannelUserData");

                    b.Navigation("ChannelUserGambleStats");

                    b.Navigation("ChannelUserRankProgress");

                    b.Navigation("ChannelUserStats");

                    b.Navigation("ChannelUserWatchtimes");

                    b.Navigation("DiscordDailyPoints");

                    b.Navigation("DiscordUserStats");

                    b.Navigation("Subathons");

                    b.Navigation("TwitchDailyPoints");
                });
#pragma warning restore 612, 618
        }
    }
}
