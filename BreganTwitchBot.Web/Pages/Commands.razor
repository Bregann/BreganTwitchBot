@page "/commands"
@using Data.Commands

@inject CustomCommandsService CustomCommandsService

<MudText Typo="Typo.h2" Align="Align.Center" Class="pt-7 pb-5" Style="color: white;">Commands</MudText>
<MudContainer MaxWidth="MaxWidth.Large">
    <MudTable Items="@PreProgrammedCommands" Hover=true Striped=true Style="background-color: #27272f;" Elevation=5 Filter="new Func<PreProgrammedCommands, bool>(ProgrammedCommandsFilterFunc)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Pre-programmed commands</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="programmedCommandsTable" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Command Name</MudTh>
            <MudTh>Parameters</MudTh>
            <MudTh>Response</MudTh>
            <MudTh>User Requirements</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="CommandName">@context.CommandName</MudTd>
            <MudTd DataLabel="Parameters">@context.Parameters</MudTd>
            <MudTd DataLabel="Response">@context.Response</MudTd>
            <MudTd DataLabel="UserRequirements">@context.UserRequirements</MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

<MudContainer MaxWidth="MaxWidth.Large" Class="pt-7">
    <MudTable Items="@CustomCommands" Hover=true Striped=true Style="background-color: #27272f;" Elevation=5 Filter="new Func<CustomCommands, bool>(CustomCommandsFilterFunc)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Custom Commands</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="customCommandsTable" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<CustomCommands, object>(x=>x.CommandName)">Command Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<CustomCommands, object>(x=>x.CommandText)">Command Text</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<CustomCommands, object>(x=>x.LastUsed)">Last Used</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<CustomCommands, object>(x=>x.TimesUsed)">Times Used</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="CommandName">@context.CommandName</MudTd>
            <MudTd DataLabel="CommandText">@context.CommandText</MudTd>
            <MudTd DataLabel="LastUsed">@context.LastUsed</MudTd>
            <MudTd DataLabel="TimesUsed">@context.TimesUsed</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudContainer>

@code {
    private List<PreProgrammedCommands> PreProgrammedCommands = new List<PreProgrammedCommands>();
    private List<CustomCommands> CustomCommands = new List<CustomCommands>();
    private string programmedCommandsTable = "";
    private string customCommandsTable = "";

    protected override async Task OnInitializedAsync()
    {
        PreProgrammedCommands.Add(new PreProgrammedCommands{CommandName = "!points", Parameters = "<user> (optional)", Response = "Shows the users points", UserRequirements = "Any"});
        CustomCommands = CustomCommandsService.GetCommands();
    }

    private bool ProgrammedCommandsFilterFunc(PreProgrammedCommands command) => PreProgrammedFilterFunc(command, programmedCommandsTable);
    private bool CustomCommandsFilterFunc(CustomCommands command) => CustomCommandsFilterFunc(command, customCommandsTable);

    private bool PreProgrammedFilterFunc(PreProgrammedCommands command, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
        {
            return true;
        }

        if (command.CommandName.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
        command.Response.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
        command.UserRequirements.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        return false;
    }

    private bool CustomCommandsFilterFunc(CustomCommands command, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
        {
            return true;
        }

        if (command.CommandName.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
        command.CommandText.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        return false;
    }
}
